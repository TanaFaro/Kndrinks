/**
 * Gestor de sesi√≥n m√°s simple y robusto
 */

interface SessionData {
  isLoggedIn: boolean
  username: string
  loginTime: string
}

class SessionManager {
  private static instance: SessionManager
  private listeners: Array<(session: SessionData | null) => void> = []

  private constructor() {}

  static getInstance(): SessionManager {
    if (!SessionManager.instance) {
      SessionManager.instance = new SessionManager()
    }
    return SessionManager.instance
  }

  // Verificar si hay una sesi√≥n v√°lida
  isLoggedIn(): boolean {
    if (typeof window === 'undefined') return false
    
    try {
      const sessionData = this.getSessionData()
      return sessionData !== null && sessionData.isLoggedIn
    } catch (error) {
      console.error('‚ùå Error verificando sesi√≥n:', error)
      return false
    }
  }

  // Obtener datos de la sesi√≥n
  getSessionData(): SessionData | null {
    if (typeof window === 'undefined') return null
    
    try {
      const isLoggedIn = localStorage.getItem('adminLoggedIn')
      const username = localStorage.getItem('adminUser')
      const loginTime = localStorage.getItem('adminLoginTime')
      
      if (isLoggedIn === 'true' && username && loginTime) {
        return {
          isLoggedIn: true,
          username,
          loginTime
        }
      }
      return null
    } catch (error) {
      console.error('‚ùå Error obteniendo datos de sesi√≥n:', error)
      return null
    }
  }

  // Iniciar sesi√≥n
  login(username: string): void {
    if (typeof window === 'undefined') return
    
    try {
      const sessionData: SessionData = {
        isLoggedIn: true,
        username,
        loginTime: new Date().toISOString()
      }
      
      localStorage.setItem('adminLoggedIn', 'true')
      localStorage.setItem('adminUser', username)
      localStorage.setItem('adminLoginTime', sessionData.loginTime)
      
      console.log('‚úÖ Sesi√≥n iniciada:', sessionData)
      this.notifyListeners(sessionData)
    } catch (error) {
      console.error('‚ùå Error iniciando sesi√≥n:', error)
    }
  }

  // Cerrar sesi√≥n
  logout(): void {
    if (typeof window === 'undefined') return
    
    try {
      const sessionData = this.getSessionData()
      console.log('üëã Cerrando sesi√≥n:', sessionData?.username)
      
      localStorage.removeItem('adminLoggedIn')
      localStorage.removeItem('adminUser')
      localStorage.removeItem('adminLoginTime')
      
      this.notifyListeners(null)
    } catch (error) {
      console.error('‚ùå Error cerrando sesi√≥n:', error)
    }
  }

  // Suscribirse a cambios de sesi√≥n
  subscribe(listener: (session: SessionData | null) => void): () => void {
    this.listeners.push(listener)
    
    // Devolver funci√≥n para desuscribirse
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener)
    }
  }

  // Notificar a todos los listeners
  private notifyListeners(session: SessionData | null): void {
    this.listeners.forEach(listener => {
      try {
        listener(session)
      } catch (error) {
        console.error('‚ùå Error notificando listener:', error)
      }
    })
  }

  // Verificar sesi√≥n peri√≥dicamente
  startPeriodicCheck(): void {
    if (typeof window === 'undefined') return
    
    setInterval(() => {
      const sessionData = this.getSessionData()
      if (sessionData) {
        console.log('üîÑ Verificaci√≥n peri√≥dica de sesi√≥n:', sessionData.username)
        this.notifyListeners(sessionData)
      } else {
        console.log('‚ùå Sesi√≥n no encontrada en verificaci√≥n peri√≥dica')
        this.notifyListeners(null)
      }
    }, 30000) // Cada 30 segundos
  }
}

// Exportar instancia singleton
export const sessionManager = SessionManager.getInstance()

// Iniciar verificaci√≥n peri√≥dica
if (typeof window !== 'undefined') {
  sessionManager.startPeriodicCheck()
}
